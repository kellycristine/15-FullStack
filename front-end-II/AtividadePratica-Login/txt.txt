Chegou a hora de colocar em pr√°tica os conhecimentos vistos em aula.
Neste exerc√≠cio vamos explorar a integra√ß√£o do nosso front-end com a API
de Recados que foi constru√≠da no m√≥dulo anterior. Al√©m disso, ser√°
proposto um desafio que envolve pesquisa üî¨ e desenvolvimento üíª.
Cen√°rio
Voc√™ est√° trabalhando em uma equipe de front-end da Growdev e um
cliente solicitou a cria√ß√£o de uma interface web para o seu sistema de
recados. O analista deixou voc√™ encarregado(a) de implementar a
p√°gina de Login dos usu√°rios cadastrados na API.

Construa uma p√°gina HTML que dever√° ser usada para realizar o login de
um usu√°rio da API de Recados. O Login dever√° ser composto por dois
campos de formul√°rio (username/email e senha) e por dois bot√µes (Login
e Cadastre-se).

Regras
1. Crie uma p√°gina HTML com os campos citados na descri√ß√£o do
exerc√≠cio.
2. Ambos os campos s√£o obrigat√≥rios.
3. N√£o se preocupe muito com a estiliza√ß√£o da p√°gina; o foco da
tarefa √© a funcionalidade.
4. N√£o √© necess√°rio adicionar funcionalidade para o bot√£o
‚ÄúCadastre-se‚Äù, mas ele dever√° constar na p√°gina.
5. Crie um evento para submeter o Login ao clicar no bot√£o ‚ÄúLogin‚Äù.
6. Crie uma fun√ß√£o Javascript para tratar o evento e para submeter o
formul√°rio de Login.
7. Construa a integra√ß√£o da p√°gina com o Login do back-end que foi
desenvolvido nos m√≥dulos anteriores.

8. Em caso de sucesso: direcione o cliente para a tela da lista de
recados.
9. Em caso de erro: Mostre um alerta informando o erro.
10. N√£o submeta o formul√°rio se algum dos campos n√£o possui valor.

DESAFIO üî¨
A funcionalidade de Login possibilita que determinado usu√°rio entre com
suas credenciais e acesse apenas os seus recados. Al√©m disso, o login
evita que outros usu√°rios vejam o recado de um cliente espec√≠fico. Para
garantir isso, √© necess√°rio criar um mecanismo de sess√£o.

Ap√≥s receber um retorno de sucesso no login, √© preciso armazenar a
sess√£o do usu√°rio logado. J√° na tela de lista de recados, √© necess√°rio
identificar qual √© o usu√°rio que fez o login (e tamb√©m, muito importante,
se h√° algum usu√°rio logado) atrav√©s da sess√£o.

Em um front-end simples, o controle de sess√£o pode ser feito usando o
recurso localStorage do Javascript. Com ele, √© poss√≠vel armazenar
informa√ß√µes no navegador que podem ser usadas em diferentes p√°ginas.
H√° diversas formas de armazenar uma ‚Äúsess√£o‚Äù com localStorage (isto √©,
podemos usar diferentes dados para representar a sess√£o. Pesquise e use
a forma que achar mais eficiente para sua aplica√ß√£o.

Regras
1. Pesquise a respeito do localStorage, seu funcionamento, suas
vantagens e principais comandos para armazenamento das
informa√ß√µes.
2. Utilize os conte√∫dos adicionais postados no classroom para esta
pesquisa.
3. Utilize o localStorage para criar um mecanismo de sess√£o ap√≥s o
login do usu√°rio na tela de Login.

4. Ap√≥s retorno de sucesso do Login, guarde a sess√£o do usu√°rio antes
de direcionar para a tela de lista de recados.
5. N√£o deixe um usu√°rio n√£o logado acessar a tela de lista de recados;
direcione de volta para a tela de login neste caso.
6. Caso um usu√°rio logado acesse a tela de lista, obtenha seu ID a
partir da sess√£o para listar apenas os seus recados.

Aten√ß√£o aos prazos
Os prazos para o desenvolvimento da aplica√ß√£o e para o desafio s√£o
diferentes:

‚óè Apresenta√ß√£o da pesquisa sobre localStorage: pr√≥xima aula com o
mentor.
‚óè Apresenta√ß√£o do andamento do trabalho (checkpoint): pr√≥xima
aula com o mentor.
‚óè Desenvolvimento da aplica√ß√£o: final do m√≥dulo.
Bora growdevers üöÄ